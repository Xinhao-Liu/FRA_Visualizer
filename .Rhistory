Accident_type %in% c("Derailments","Collisions"),
`class 1`=="class1",
`Railroad Successor` %in% c("BNSF","KCS","UP","CSX","NS","CNGT","CP(US)"),
ACCTRK %in% c(2,4),
Date <= "2022-12-31",
Date >= "2013-01-01") %>%
mutate(`Railroad Successor` = ifelse(`Railroad Successor` == "CNGT", "CN",
ifelse(`Railroad Successor` == "CP(US)", "CP", `Railroad Successor`))) %>%
mutate(traffic_name = paste(ifelse(`class 1`=="class1", `Railroad Successor`, "Non"),
"ClassI",
"Freight",
ifelse(ACCTRK%in%c(1,3),"Both_Mainline","Non_Mainline"),sep = "_")) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_name,Year) %>%
left_join(raw_traffic,by=c("traffic_name"="...1")) %>%
mutate(index = Year - 1996 + 8, traffic_value = 0)
View(raw_traffic)
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2024)/Main APP')
# 发送 API 请求并解析数据
response <- GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/GCIS/v1/odata/$metadata")  # 用正确的 API URL 替换此处
library(httr)
library(jsonlite)
# 发送 API 请求并解析数据
response <- GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/GCIS/v1/odata/$metadata")  # 用正确的 API URL 替换此处
data <- fromJSON(content(response, "text"))
View(response)
View(response)
# 设置 API 请求 URL，包含 token
url <- "https://safetydata.fra.dot.gov/MasterWebService/PublicApi/GCIS/v1/odata/Crossings?token=2593662a09a22185ee42b9746297528e"
response <- GET(url)
# 检查请求状态并解析内容
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"))
print(data)
} else {
print(paste("Error:", status_code(response)))
}
View(data)
# 设置 API 请求 URL，包含 token
url <- "https://safetydata.fra.dot.gov/MasterWebService/PublicApi/GCIS/v1/odata/Safety?token=2593662a09a22185ee42b9746297528e"
response <- GET(url)
# 检查请求状态并解析内容
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"))
print(data)
} else {
print(paste("Error:", status_code(response)))
}
# 设置 API 请求 URL，包含 token
url <- "https://safetydata.fra.dot.gov/MasterWebService/PublicApi/GCIS/v1/odata/Default?token=2593662a09a22185ee42b9746297528e"
response <- GET(url)
# 检查请求状态并解析内容
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"))
print(data)
} else {
print(paste("Error:", status_code(response)))
}
# 设置请求 URL
url <- "https://safetydata.fra.dot.gov/MASTERWEBSERVICE/DatadownloadService.asmx"
# SOAP 请求体
soap_body <- '
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Header>
<AuthHeader xmlns="https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService">
<Username>your_username</Username>
<Password>your_password</Password>
</AuthHeader>
</soap:Header>
<soap:Body>
<GetAccident54DataByRailroad xmlns="https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService">
<year>2023</year>
</GetAccident54DataByRailroad>
</soap:Body>
</soap:Envelope>'
# 发送 SOAP 请求
response <- POST(
url,
add_headers(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = "https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService/GetAccident54DataByRailroad"
),
body = soap_body,
encode = "raw"
)
# 检查响应状态
if (status_code(response) == 200) {
# 解析 XML 响应
xml_response <- content(response, as = "text")
parsed_response <- xmlParse(xml_response)
print(parsed_response)
} else {
print(paste("Error:", status_code(response)))
}
# 设置请求 URL
url <- "https://safetydata.fra.dot.gov/MASTERWEBSERVICE/DatadownloadService.asmx"
# SOAP 请求体
soap_body <- '
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Header>
<AuthHeader xmlns="https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService">
<Username>xinhaol2@illinois.edu</Username>
<Password>Lxh@19981217!</Password>
</AuthHeader>
</soap:Header>
<soap:Body>
<GetAccident54DataByRailroad xmlns="https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService">
<year>2023</year>
</GetAccident54DataByRailroad>
</soap:Body>
</soap:Envelope>'
# 发送 SOAP 请求
response <- POST(
url,
add_headers(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = "https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService/GetAccident54DataByRailroad"
),
body = soap_body,
encode = "raw"
)
# 检查响应状态
if (status_code(response) == 200) {
# 解析 XML 响应
xml_response <- content(response, as = "text")
parsed_response <- xmlParse(xml_response)
print(parsed_response)
} else {
print(paste("Error:", status_code(response)))
}
# SOAP 请求体
soap_body <- '
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Header>
<AuthHeader xmlns="https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService">
<Username>'xinhaol2@illinois.edu'</Username>
# 发送 SOAP 请求
response <- POST(
url,
add_headers(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = "https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService/GetAccident54DataByRailroad"
),
body = soap_body,
encode = "raw"
)
# 检查响应状态
if (status_code(response) == 200) {
# 解析 XML 响应
xml_response <- content(response, as = "text")
parsed_response <- xmlParse(xml_response)
print(parsed_response)
} else {
print(paste("Error:", status_code(response)))
}
# 设置请求 URL
url <- "https://safetydata.fra.dot.gov/MASTERWEBSERVICE/DatadownloadService.asmx"
# SOAP 请求体
soap_body <- "
<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">
<soap:Header>
<AuthHeader xmlns=\"https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService\">
<Username>xinhaol2@illinois.edu</Username>
<Password>Lxh@19981217!</Password>
</AuthHeader>
</soap:Header>
<soap:Body>
<GetAccident54DataByRailroad xmlns=\"https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService\">
<year>2023</year>
</GetAccident54DataByRailroad>
</soap:Body>
</soap:Envelope>"
# 发送 SOAP 请求
response <- POST(
url,
add_headers(
'Content-Type' = "text/xml; charset=utf-8",
'SOAPAction' = "https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService/GetAccident54DataByRailroad"
),
body = soap_body,
encode = "raw"
)
# 检查响应状态
if (status_code(response) == 200) {
# 解析 XML 响应
xml_response <- content(response, as = "text")
parsed_response <- xmlParse(xml_response)
print(parsed_response)
} else {
print(paste("Error:", status_code(response)))
}
# 设置请求 URL
url <- "https://safetydata.fra.dot.gov/MASTERWEBSERVICE/DatadownloadService.asmx"
# SOAP 1.2 请求体
soap_body <- "
<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">
<soap12:Header>
<AuthHeader xmlns=\"https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService\">
<Username>xinhaol2@illinois.edu</Username>
<Password>Lxh@19981217!</Password>
</AuthHeader>
</soap12:Header>
<soap12:Body>
<GetAccident54DataByRailroad xmlns=\"https://safetydata.fra.dot.gov/MasterWebService/DataDownloadService\">
<year>2023</year>
</GetAccident54DataByRailroad>
</soap12:Body>
</soap12:Envelope>"
# 发送 SOAP 请求 (使用 SOAP 1.2)
response <- POST(
url,
add_headers(
'Content-Type' = "application/soap+xml; charset=utf-8"
),
body = soap_body,
encode = "raw"
)
# 检查响应状态
if (status_code(response) == 200) {
# 解析 XML 响应
xml_response <- content(response, as = "text")
parsed_response <- xmlParse(xml_response)
print(parsed_response)
} else {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))  # 打印响应的详细内容
}
# 设置请求 URL
url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 发送 GET 请求
response <- GET(url)
# 检查响应状态并解析内容
if (status_code(response) == 200) {
# 将内容转换为 R 数据框
data <- fromJSON(content(response, "text"))
print(data)
} else {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
}
library(dplyr)
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
repeat {
# 构建带有 $limit 和 $offset 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", offset)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
View(all_data)
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit 和 $offset 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
View(all_data)
View(all_data)
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
# 设置需要获取的年份
year_filter <- c(2021, 2023)
year_filter_query <- paste(year_filter, collapse = ",")
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit、$offset 和 year 过滤参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset, "&$where=year IN(", year_filter_query, ")")
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
# 设置需要获取的年份
year_filter <- c(2021, 2023)
year_filter_query <- paste(year_filter, collapse = ",")
# 编码 $where 子句，确保格式正确
where_clause <- URLencode(paste0("year IN(", year_filter_query, ")"))
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit、$offset 和 $where 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset, "&$where=", where_clause)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
# 打印总记录数
print(paste("Total records fetched for years", paste(year_filter, collapse = ", "), ":", nrow(all_data)))
print(all_data)
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
# 设置需要获取的年份
year_filter <- c("2021", "2023", "2024")
year_filter_query <- paste(year_filter, collapse = ",")
# 编码 $where 子句，确保格式正确
where_clause <- URLencode(paste0("year IN(", year_filter_query, ")"))
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit、$offset 和 $where 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset, "&$where=", where_clause)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
# 设置需要获取的年份并将其转换为字符串格式
year_filter <- c("2021", "2023")
year_filter_query <- paste0("'", paste(year_filter, collapse = "','"), "'")
# 编码 $where 子句，确保格式正确
where_clause <- URLencode(paste0("year IN(", year_filter_query, ")"))
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit、$offset 和 $where 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset, "&$where=", where_clause)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
View(all_data)
# 设置请求的基础 URL
base_url <- "https://data.transportation.gov/resource/85tf-25kj.json"
# 每次请求的记录数
limit <- 1000
# 初始化偏移量
offset <- 0
# 初始化一个空的数据框以存储结果
all_data <- data.frame()
# 设置需要获取的年份并将其转换为字符串格式
year_filter <- c("2021", "2023", "2024")
year_filter_query <- paste0("'", paste(year_filter, collapse = "','"), "'")
# 编码 $where 子句，确保格式正确
where_clause <- URLencode(paste0("year IN(", year_filter_query, ")"))
repeat {
# 格式化 offset 为整数字符串，避免科学计数法
formatted_offset <- format(offset, scientific = FALSE)
# 构建带有 $limit、$offset 和 $where 参数的请求 URL
url <- paste0(base_url, "?$limit=", limit, "&$offset=", formatted_offset, "&$where=", where_clause)
# 发送 GET 请求
response <- GET(url)
# 检查响应状态
if (status_code(response) != 200) {
print(paste("Error:", status_code(response)))
print(content(response, as = "text"))
break
}
# 将 JSON 内容转换为数据框
data <- fromJSON(content(response, "text"))
# 合并当前页数据到总数据框中
all_data <- bind_rows(all_data, data)
# 检查是否获取到少于 `limit` 条记录，如果是，说明已到达数据末尾
if (nrow(data) < limit) {
break
}
# 增加偏移量以获取下一页数据
offset <- offset + limit
}
View(all_data)
library(shiny); runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
break
runApp('FRA_Visualizer.R')
runApp('C:/Users/liuxi/OneDrive - University of Illinois - Urbana/Desktop/Research/2023.03.22 (FRA 2024)/Main APP')
