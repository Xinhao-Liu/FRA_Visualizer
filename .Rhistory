datestart = as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-30", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
datestart = as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-30", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
as.numeric(as.POSIXct("2018-01-29 20:00:00", origin="1970-01-01"))
datestart = as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-29 09:00:00", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
raw
View(raw)
raw = raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
datestart = as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-29 09:00:00", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw = raw %>%
mutate(start = as.POSIXct(firstSeen, origin="1970-01-01")),
raw = raw %>%
mutate(start = as.POSIXct(firstSeen, origin="1970-01-01"),
end = as.POSIXct(lastSeen, origin="1970-01-01"),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
start = paste(2018-01-29, 07:00:00, sep = " ")
paste(2018-01-29, 07:00:00, sep = " ")
paste("2018-01-29", "07:00:00", sep = " ")
as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01")
as.numeric(as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01")
as.numeric(as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01"))
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
shiny::runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
update.R
install.packages("installr")
library(installr)
updateR()
R.Version()
RStudio.Version()
install.packages("benchmarkme")
library(benchmarkme)
res = benckmark_std(runs = 3)
res = benchmark_std(runs = 3)
plot(res)
get_ram()
get_cpu()
benchmark_io(runs=1,size=200)
benchmark_io(runs=1,size=50)
plot(benchmark_io(runs=1,size=50))
df = data.frame(x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173))
df = data.frame(x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173))
x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156)
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173)
# Normal?
shapiro.test(x1)
shapiro.test(x2)
# Take log for both sample
logx1 = log(x1)
logx2 = log(x2)
shapiro.test(logx1)
shapiro.test(logx2)
# two sample t-test
t.test(logx1,logx2)
# rank sum test
wilcox.test(x1, x2)
library(googledrive)
install.packages("googledrive")
library(googledrive)
temp <- tempfile(fileext = ".zip")
download.file("https://docs.google.com/spreadsheets/d/1VhLjcvaN0k9CW3E5kKTKGUKrTX3L-Eex/edit?usp=share_link&ouid=109369465217538518370&rtpof=true&sd=true",
temp)
out <- unzip(temp, exdir = tempdir())
bank <- read.csv(out[14], sep = ";")
install.packages("googlesheets4")
# once installed
library(googlesheets4)
R.version
library(installr)
updateR()
R.version
RStudio.Version()
R.version
library(updateR)
library(installr)
updateR()
updateR()
updateR()
library(shiny); runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
as.numeric("12.3%")
extract_numeric("12.3%")
parse_number("12.3%")
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
breaks = seq(0,1,6)
breaks = seq(0,1,0.2)
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
seq(0,1,1/6)
seq(0,1,1/5)
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
library(shiny); runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer/FRA_Visualizer.R')
library(shiny); runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
round(123456 / 1000) * 1000)
round(123456 / 1000) * 1000
round(123456 / 1000)
round(123456 / 1000) * 1001
round(123456 / 1000) * 1000
round(123456 / 1000) * 1000 + 1000
ceiling(123456 / 1000) * 1000
runApp('FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Main APP')
library(shiny); runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer_Public/FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
library(readr)
raw = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All_year_FRA.csv")
problems()
raw %>%
filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
filter(`class 1` %in% c("non-1"),
TrainType %in% c("O"),
Accident_type %in% c("Other"),
ACCTRK %in% c(1),
Category %in% c("H"),
Date <= "2020-01-01",
Date >= "2010-01-01") %>%
filter(!is.na(Group)) %>%
group_by(Group) %>%
mutate(Frequency = n(), total_derail = sum(TotalDerail)) %>%
ungroup() %>%
mutate(frequency_ratio = Frequency/length(SUMS), severity_ratio = total_derail/sum(TotalDerail)) %>%
group_by(Group) %>%
mutate(`Average Number of Cars Derailed` = round(total_derail/Frequency,1)) %>%
select(`Group Name`,Group, `Average Number of Cars Derailed`, Frequency, total_derail, severity_ratio) %>%
unique() %>%
arrange(desc(total_derail)) %>%
ungroup() %>%
mutate(`Cumulative Percentage` = paste0(round(cumsum(severity_ratio),3)*100,"%"),`Total Number of Cars` = total_derail) %>%
select(`Group Name`,Group, Frequency, `Total Number of Cars`, `Cumulative Percentage`)
ggplot(final,aes(x=as.character(Year),y=rate,group=name,color=name))+
geom_line(size = 2)+
xlab("Year")+
ylab("Rate (per million miles)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
axis.text.x = element_text(color = "#000000", size = 16,
margin = margin(t = 0, r = 0, b = 5, l = 0)),
axis.text.y = element_text(color = "#000000", size = 16,
margin = margin(t = 0, r = 0, b = 0, l = 10)),
axis.title.y.right = element_text(color = "#000000", size = 20, face = "bold",
margin = margin(t = 0, r = 0, b = 0, l = 10)),
axis.title.x = element_text(color = "#000000", size = 20, face="bold"),
axis.title.y = element_text(color = "#000000", size = 20, face="bold",
margin = margin(t = 0, r = 0, b = 0, l = 10)),
legend.title = element_text(color = "#000000", size = 16),
legend.text = element_text(color = "#000000", size = 16))
traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2022_All.csv")
traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2023_All.csv")
traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2023_class1_ONE.csv")
row_names <- row.names(t(traffic %>%
select(-`1996`) %>%
filter(...1=="All_Freight") %>%
select(`2010`:`2019`)))
test = data.frame(t(traffic %>%
select(-`1996`) %>%
select(`2010`:`2019`))) %>%
mutate(Year = as.numeric(row_names)) %>%
rename(traffic = t.traffic.....select...1996.......filter....1.....All_Freight.......)
raw_traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2022_class1_ONE.csv")
raw_traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2023_class1_ONE.csv")
aaa = raw %>%
# filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
filter(#TrainType %in% c("F"),
Accident_type %in% c("Derailments","Collisions"),
`class 1`=="class1",
`Railroad Successor` %in% c("BNSF","KCS","UP","CSX","NS","CNGT","CP(US)"),
ACCTRK %in% c(2,4),
Date <= "2022-12-31",
Date >= "2013-01-01") %>%
mutate(`Railroad Successor` = ifelse(`Railroad Successor` == "CNGT", "CN",
ifelse(`Railroad Successor` == "CP(US)", "CP", `Railroad Successor`))) %>%
mutate(traffic_name = paste(ifelse(`class 1`=="class1", `Railroad Successor`, "Non"),
"ClassI",
"Freight",
ifelse(ACCTRK%in%c(1,3),"Both_Mainline","Non_Mainline"),sep = "_")) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_name,Year) %>%
left_join(raw_traffic,by=c("traffic_name"="...1")) %>%
mutate(index = Year - 1996 + 8, traffic_value = 0)
num_vec = seq(1:nrow(aaa))
index_vec = as.vector(aaa %>% select(index))[[1]]
final = aaa
traffic_val = mapply(function(i, j) {
final[i, ncol(aaa)] = aaa[i, j][[1]]
}, i = num_vec, j = index_vec)
final =
final %>%
mutate(traffic_value = traffic_val) %>%
mutate(ACCTRK = as.factor(ACCTRK)) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_value,Year) %>%
group_by(Category,Year) %>%
mutate(count=n(),final_traffic = sum(unique(traffic_value))) %>%
ungroup() %>%
group_by(Year) %>%
mutate(final_traffic = max(final_traffic)) %>%
mutate(rate=count/final_traffic) %>%
unique() %>%
select(Accident_type,Year,rate) %>%
unique()
name = colnames(final)[1]
ggplot(final,aes(x=as.character(Year),y=rate,group=name,color=name))+
geom_line(size = 2)+
xlab("Year")+
ylab("Rate (per million miles)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "top",
axis.text.x = element_text(color = "#000000", size = 16,
margin = margin(t = 0, r = 0, b = 5, l = 0)),
axis.text.y = element_text(color = "#000000", size = 16,
margin = margin(t = 0, r = 0, b = 0, l = 10)),
axis.title.y.right = element_text(color = "#000000", size = 20, face = "bold",
margin = margin(t = 0, r = 0, b = 0, l = 10)),
axis.title.x = element_text(color = "#000000", size = 20, face="bold"),
axis.title.y = element_text(color = "#000000", size = 20, face="bold",
margin = margin(t = 0, r = 0, b = 0, l = 10)),
legend.title = element_text(color = "#000000", size = 16),
legend.text = element_text(color = "#000000", size = 16))
aaa = raw %>%
# filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
filter(#TrainType %in% c("F"),
Accident_type %in% c("Derailments","Collisions"),
`class 1`=="class1",
`Railroad Successor` %in% c("BNSF","KCS","UP","CSX","NS","CNGT","CP(US)"),
ACCTRK %in% c(2,4),
Date <= "2022-12-31",
Date >= "2013-01-01") %>%
mutate(`Railroad Successor` = ifelse(`Railroad Successor` == "CNGT", "CN",
ifelse(`Railroad Successor` == "CP(US)", "CP", `Railroad Successor`))) %>%
mutate(traffic_name = paste(ifelse(`class 1`=="class1", `Railroad Successor`, "Non"),
"ClassI",
"Freight",
ifelse(ACCTRK%in%c(1,3),"Both_Mainline","Non_Mainline"),sep = "_")) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_name,Year) %>%
left_join(raw_traffic,by=c("traffic_name"="...1")) %>%
mutate(index = Year - 1996 + 8, traffic_value = 0)
num_vec = seq(1:nrow(aaa))
index_vec = as.vector(aaa %>% select(index))[[1]]
final = aaa
traffic_val = mapply(function(i, j) {
final[i, ncol(aaa)] = aaa[i, j][[1]]
}, i = num_vec, j = index_vec)
final =
final %>%
mutate(traffic_value = traffic_val) %>%
mutate(ACCTRK = as.factor(ACCTRK)) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_value,Year) %>%
group_by(Category,Year) %>%
mutate(count=n(),final_traffic = sum(unique(traffic_value))) %>%
ungroup() %>%
group_by(Year) %>%
mutate(final_traffic = max(final_traffic)) %>%
mutate(rate=count/final_traffic) %>%
unique() %>%
select(Accident_type,Year,rate) %>%
unique()
View(traffic_val)
View(traffic)
aaa = raw %>%
# filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
filter(#TrainType %in% c("F"),
Accident_type %in% c("Derailments","Collisions"),
`class 1`=="class1",
`Railroad Successor` %in% c("BNSF","KCS","UP","CSX","NS","CNGT","CP(US)"),
ACCTRK %in% c(2,4),
Date <= "2022-12-31",
Date >= "2013-01-01") %>%
mutate(`Railroad Successor` = ifelse(`Railroad Successor` == "CNGT", "CN",
ifelse(`Railroad Successor` == "CP(US)", "CP", `Railroad Successor`))) %>%
mutate(traffic_name = paste(ifelse(`class 1`=="class1", `Railroad Successor`, "Non"),
"ClassI",
"Freight",
ifelse(ACCTRK%in%c(1,3),"Both_Mainline","Non_Mainline"),sep = "_")) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_name,Year) %>%
left_join(raw_traffic,by=c("traffic_name"="...1")) %>%
mutate(index = Year - 1996 + 8, traffic_value = 0)
View(aaa)
View(aaa)
#### 7.10.2024
raw = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All_year_FRA.csv")
raw %>%
filter(Year > 1996) %>%
filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
mutate(HIGHSPD = as.numeric(HIGHSPD)) %>%
mutate(TotalConsist = as.numeric(TotalConsist)) %>%
filter(`class 1` %in% input$RRClass_type,
TrainType %in% input$Train_type,
Accident_type %in% input$accident_type,
ACCTRK %in% input$track_type,
Category %in% input$accident_cause,
Date <= input$date[2],
Date >= input$date[1],
TRKCLAS %in% input$track_class,
HIGHSPD >= input$speed[1],
HIGHSPD <= input$speed[2],
TotalConsist >= input$train_length[1],
TotalConsist <= input$train_length[2]) %>%
filter(if(length(input$RRClass_type) == 1 && input$RRClass_type == 'class1') {
`Railroad Successor` %in% input$ClassI_type
} else {
SUMS != "999"
})
raw %>%
filter(Year > 1996) %>%
filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
mutate(HIGHSPD = as.numeric(HIGHSPD)) %>%
mutate(TotalConsist = as.numeric(TotalConsist)) %>%
filter(`class 1` %in% c("non-1"),
TrainType %in% c("O"),
Accident_type %in% c("Other"),
ACCTRK %in% c(1),
Category %in% c("H"),
Date <= "2020-01-01",
Date >= "2010-01-01") %>%
filter(if(length(input$RRClass_type) == 1 && input$RRClass_type == 'class1') {
`Railroad Successor` %in% input$ClassI_type
} else {
SUMS != "999"
})
raw %>%
filter(Year > 1996) %>%
filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
mutate(HIGHSPD = as.numeric(HIGHSPD)) %>%
mutate(TotalConsist = as.numeric(TotalConsist)) %>%
filter(`class 1` %in% c("non-1"),
TrainType %in% c("O"),
Accident_type %in% c("Other"),
ACCTRK %in% c(1),
Category %in% c("H"),
Date <= "2020-01-01",
Date >= "2010-01-01")
View(raw_traffic)
raw_traffic = read_csv("https://raw.githubusercontent.com/Xinhao-Liu/FRA_Visualizer/main/All%20Traffic%20Data_1996-2023_class1_ONE.csv")
aaa = raw %>%
# filter(!is.na(TYPE_clean), !is.na(TotalDerail), TotalDerail >= 0) %>%
mutate(Accident_type = ifelse(TYPE_clean == "01", "Derailments",
ifelse(TYPE_clean %in% c("02","03","04","05","06","08"), "Collisions",
ifelse(TYPE_clean == "07", "Grade Crossing", "Other")))) %>%
mutate(Date = as.Date(as.character(Date),format = "%Y%m%d")) %>%
filter(#TrainType %in% c("F"),
Accident_type %in% c("Derailments","Collisions"),
`class 1`=="class1",
`Railroad Successor` %in% c("BNSF","KCS","UP","CSX","NS","CNGT","CP(US)"),
ACCTRK %in% c(2,4),
Date <= "2022-12-31",
Date >= "2013-01-01") %>%
mutate(`Railroad Successor` = ifelse(`Railroad Successor` == "CNGT", "CN",
ifelse(`Railroad Successor` == "CP(US)", "CP", `Railroad Successor`))) %>%
mutate(traffic_name = paste(ifelse(`class 1`=="class1", `Railroad Successor`, "Non"),
"ClassI",
"Freight",
ifelse(ACCTRK%in%c(1,3),"Both_Mainline","Non_Mainline"),sep = "_")) %>%
select(`Railroad Successor`,`class 1`,ACCTRK,Accident_type,Category,traffic_name,Year) %>%
left_join(raw_traffic,by=c("traffic_name"="...1")) %>%
mutate(index = Year - 1996 + 8, traffic_value = 0)
View(raw_traffic)
runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2024)/Main APP')
