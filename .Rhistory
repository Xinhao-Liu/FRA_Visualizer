summarise(sum = sum(FRTRNMI,OTHERMI)))
mile$All_Freight_Non_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("1","2")) %>%
summarise(sum = sum(ysmi)))
mile$ClassI_Freight_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("1")) %>%
summarise(sum = sum(FRTRNMI,OTHERMI)))
mile$ClassI_Freight_Non_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("1")) %>%
summarise(sum = sum(ysmi)))
mile$Non_ClassI_Freight_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("2")) %>%
summarise(sum = sum(FRTRNMI,OTHERMI)))
mile$Non_ClassI_Freight_Non_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("2")) %>%
summarise(sum = sum(ysmi)))
mile$All_Passenger = as.numeric(df %>%
filter(RRCLS %in% c("3")) %>%
summarise(sum = sum(PASTRNMI)))
mile$All_Train = as.numeric(df %>%
filter(RRCLS %in% c("1","2","3")) %>%
summarise(sum = sum(FRTRNMI,OTHERMI,ysmi,PASTRNMI)))
mile$All_Train_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("1","2","3")) %>%
summarise(sum = sum(FRTRNMI,OTHERMI,PASTRNMI)))
mile$All_Train_Non_Mainline = as.numeric(df %>%
filter(RRCLS %in% c("1","2","3")) %>%
summarise(sum = sum(ysmi)))
return(mile/1000000)
}
output_mile = function(allfile){
all_traffic = sapply(lapply(allfile, total_mile),rbind)
colnames(all_traffic) = str_extract(str_extract(files,"\\d{4}.xlsx"),"\\d{4}")
return(all_traffic)
}
All_traffic_data = as.data.frame(output_mile(files))
write.xlsx(All_traffic_data, paste0('All Traffic Data_' , colnames(All_traffic_data)[1], '-',colnames(All_traffic_data)[length(colnames(All_traffic_data))], '.xlsx'),rowNames = TRUE)
sum(df_2019$RRCLS=="3")
library(shiny)
answers = c("It is certain",
"It is decidedly so",
"Without a doubt",
"Yes, definitely",
"You may rely on it",
"As I see it, yes",
"Most likely",
"Outlook good",
"Yes",
"Signs point to yes",
"Reply hazy try again",
"Ask again later",
"Better not tell you now",
"Cannot predict now",
"Concentrate and ask again",
"Don't count on it",
"My reply is no",
"My sources say no",
"Outlook not so good",
"Very doubtful")
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("STAT 440 Magic 8 Ball"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("Question","Ask Me Anything"),
actionButton("Button0","Try Me")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("Answer")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
answers = c("It is certain",
"It is decidedly so",
"Without a doubt",
"Yes, definitely",
"You may rely on it",
"As I see it, yes",
"Most likely",
"Outlook good",
"Yes",
"Signs point to yes",
"Reply hazy try again",
"Ask again later",
"Better not tell you now",
"Cannot predict now",
"Concentrate and ask again",
"Don't count on it",
"My reply is no",
"My sources say no",
"Outlook not so good",
"Very doubtful")
observeEvent(input$Button0,{
output$Answer = renderText({sample(answers,1)})
})
}
# Run the application
shinyApp(ui = ui, server = server)
gc()
source("~/.active-rstudio-document", echo=TRUE)
library(httr)
library(jsonlite)
token <- "2593662a09a22185ee42b9746297528e"
GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json",
add_headers(Authorization=token))
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json",
add_headers(Authorization=token))
data = fromJSON(rawToChar(res$content))
data = fromJSON(rawToChar(res$content))
res$content
res
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=application/json",
add_headers(Authorization=token))
data = fromJSON(rawToChar(res$content))
res
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$filter=CrossingId eq '016530M'&token=<2593662a09a22185ee42b9746297528e>")
res
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=jsonId eq '016530M'&token=<2593662a09a22185ee42b9746297528e>")
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=jsontoken=<2593662a09a22185ee42b9746297528e>")
res
data = fromJSON(rawToChar(res$content))
data
View(data)
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=jsontoken=2593662a09a22185ee42b9746297528e")
data = fromJSON(rawToChar(res$content))
res
View(data)
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$filter=CrossingId eq '016530M'$format=jsontoken=2593662a09a22185ee42b9746297528e")
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$filter=CrossingId eq '016530M'&$format=jsontoken=2593662a09a22185ee42b9746297528e")
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$filter=CrossingId eq '016530M'&$format=json&token=2593662a09a22185ee42b9746297528e")
res = GET("https://opensky-network.org/api/states/all")
res
data = fromJSON(rawToChar(res$content))
View(data)
View(data)
data[["time"]]
res
res = GET("https://opensky-network.org/api/states/all/time")
data = fromJSON(rawToChar(res$content))
View(data)
res = GET("https://opensky-network.org/api/states/time")
data = fromJSON(rawToChar(res$content))
res
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e")
data = fromJSON(rawToChar(res$content))
res
data = fromJSON(rawToChar(res$content))
View(data)
data = fromJSON(rawToChar(res$content))
data
res$content
data$value
data = fromJSON(rawToChar(res$content))$value
data
View(data)
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$filter=TypeXing eq '3'&token=2593662a09a22185ee42b9746297528e")
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e")
data = fromJSON(rawToChar(res$content))$value
data
data = rbind(data,data2)
for (i in 1:10) {
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e")
data2 = fromJSON(rawToChar(res$content))$value
data = rbind(data,data2)
}
View(data)
unique(data$CrossingId)
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e$skip=10")
data = fromJSON(rawToChar(res$content))$value
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e$skip=10")
res
View(data)
View(res)
token <- "2593662a09a22185ee42b9746297528e"
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?token=2593662a09a22185ee42b9746297528e$skip=10")
data = fromJSON(rawToChar(res$content))$value
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json$token=2593662a09a22185ee42b9746297528e$skip=10")
data = fromJSON(rawToChar(res$content))$value
data
res
View(res)
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=2593662a09a22185ee42b9746297528e$skip=10")
data = fromJSON(rawToChar(res$content))$value
res = GET("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=2593662a09a22185ee42b9746297528e&$skip=10")
data = fromJSON(rawToChar(res$content))$value
data
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=10")
data2 = fromJSON(rawToChar(res$content))$value
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=10"))
for (i in 1:10) {
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=10"))
data2 = fromJSON(rawToChar(res$content))$value
data = rbind(data,data2)
}
unique(data$CrossingId)
for (i in 1:10) {
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=",i*10))
data2 = fromJSON(rawToChar(res$content))$value
data = rbind(data,data2)
}
unique(data$CrossingId)
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=",i*1000000))
data2 = fromJSON(rawToChar(res$content))$value
for (i in 1:10) {
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=",i*1000000))
data2 = fromJSON(rawToChar(res$content))$value
data = rbind(data,data2)
}
for (i in 1:10) {
res = GET(paste0("https://safetydata.fra.dot.gov/MasterWebService/PublicApi/frads/v1/odata/gcis/Crossings?$format=json&token=",token,"&$skip=",i*1000000000000000))
data2 = fromJSON(rawToChar(res$content))$value
data = rbind(data,data2)
}
unique(data$CrossingId)
res = GET("https://opensky-network.org/api/flights/all?begin=1517227200&end=1517230800")
res
data = fromJSON(rawToChar(res$content))$value
data
data = fromJSON(rawToChar(res$content))
data
View(data)
as.Date(as.POSIXct(1517227200, origin="1970-01-01"))
res = GET("https://opensky-network.org/api/flights/all?begin=1517227200&end=1517230800")
data = fromJSON(rawToChar(res$content))
data
as.Date(as.POSIXct(1517227200, origin="1970-01-01"))
as.POSIXct(1517227200, origin="1970-01-01")
as.numeric(as.POSIXct("2013-09-16 2:13:46 EST"))
as.numeric(as.POSIXct("2013-09-16 2:13:46 EST"))
shiny::runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
?dateRangeInput
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
as.POSIXct(value, origin="1970-01-01")
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
install.packages("shinythemes")
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
h1("STAT440 Final Project_xinhaol2"),
h2("Intro of the dataset"),
theme = shinythemes::shinytheme('superhero'),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dateRangeInput("date",
"Select date range you are interested in:",
start = "2018-01-01",
end = "2018-02-01",
min = "2018-01-01",
max = "2021-12-31",
format = "yyyy-mm-dd"),
selectInput("daytime",
"Select daytime range you are interested in:",
choices = c("Morning","Afternoon","Evening"),
selected = c("Morning", "Afternoon"),
multiple = TRUE)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("DT")
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
as.Date(as.POSIXct(1517227200, origin="1970-01-01"))
as.numeric(as.POSIXct("2013-09-16 2:13:46 EST"))
as.POSIXct(1517227200, origin="1970-01-01")
as.numeric(as.POSIXct("2013-09-16 2:13:46 EST"))
as.numeric(as.POSIXct("2013-09-16"))
as.Date(as.POSIXct(1517227200, origin="1970-01-01"))
data$firstSeen-data$lastSeen
data$lastSeen-data$firstSeen
as.Date(as.POSIXct(1260  , origin="1970-01-01")
as.Date(as.POSIXct(1260  , origin="1970-01-01"))
as.POSIXct(1260, origin="1970-01-01")
as.POSIXct(2207, origin="1970-01-01")
2207-1260
947/60
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
as.Date(as.POSIXct(data$firstSeen, origin="1970-01-01"))
datestart = as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-30", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
datestart = as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-30", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
as.numeric(as.POSIXct("2018-01-29", origin="1970-01-01"))
as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
as.numeric(as.POSIXct("2018-01-29 20:00:00", origin="1970-01-01"))
datestart = as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-29 09:00:00", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
raw
View(raw)
raw = raw %>%
mutate(start = as.Date(as.POSIXct(firstSeen, origin="1970-01-01")),
end = as.Date(as.POSIXct(lastSeen, origin="1970-01-01")),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
datestart = as.numeric(as.POSIXct("2018-01-29 07:00:00", origin="1970-01-01"))
dateend = as.numeric(as.POSIXct("2018-01-29 09:00:00", origin="1970-01-01"))
URL = paste0("https://opensky-network.org/api/flights/all?begin=",
datestart,"&end=",dateend)
res = GET(URL)
raw = fromJSON(rawToChar(res$content))
raw = raw %>%
mutate(start = as.POSIXct(firstSeen, origin="1970-01-01")),
raw = raw %>%
mutate(start = as.POSIXct(firstSeen, origin="1970-01-01"),
end = as.POSIXct(lastSeen, origin="1970-01-01"),
duration = lastSeen-firstSeen) %>%
select(start, end, icao24, duration,
estDepartureAirportHorizDistance,
estDepartureAirportVertDistance,
estArrivalAirportHorizDistance,
estArrivalAirportVertDistance,
departureAirportCandidatesCount,
arrivalAirportCandidatesCount)
start = paste(2018-01-29, 07:00:00, sep = " ")
paste(2018-01-29, 07:00:00, sep = " ")
paste("2018-01-29", "07:00:00", sep = " ")
as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01")
as.numeric(as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01")
as.numeric(as.POSIXct(paste("2018-01-29", "07:00:00", sep = " "), origin="1970-01-01"))
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
shiny::runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
runApp('C:/Users/liuxi/Desktop/Grad.-FA22/STAT440/xinhaol2_Wednesday/final project/STAT440_Final_Project')
update.R
install.packages("installr")
library(installr)
updateR()
R.Version()
RStudio.Version()
install.packages("benchmarkme")
library(benchmarkme)
res = benckmark_std(runs = 3)
res = benchmark_std(runs = 3)
plot(res)
get_ram()
get_cpu()
benchmark_io(runs=1,size=200)
benchmark_io(runs=1,size=50)
plot(benchmark_io(runs=1,size=50))
df = data.frame(x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173))
df = data.frame(x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173))
x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156),
x1 = c(1.750,0.019,0.339,0.122,0.469,14.24,0.061,0.038,0.274,29.65,0.339,0.120,1.156)
x2 = c(0.008,0.012,0.039,0.146,1.112,0.004,0.103,0.007,0.041,0.003,0.040,0.260,0.112,0.171,0.173)
# Normal?
shapiro.test(x1)
shapiro.test(x2)
# Take log for both sample
logx1 = log(x1)
logx2 = log(x2)
shapiro.test(logx1)
shapiro.test(logx2)
# two sample t-test
t.test(logx1,logx2)
# rank sum test
wilcox.test(x1, x2)
library(googledrive)
install.packages("googledrive")
library(googledrive)
temp <- tempfile(fileext = ".zip")
download.file("https://docs.google.com/spreadsheets/d/1VhLjcvaN0k9CW3E5kKTKGUKrTX3L-Eex/edit?usp=share_link&ouid=109369465217538518370&rtpof=true&sd=true",
temp)
out <- unzip(temp, exdir = tempdir())
bank <- read.csv(out[14], sep = ";")
install.packages("googlesheets4")
# once installed
library(googlesheets4)
R.version
library(installr)
updateR()
R.version
RStudio.Version()
R.version
library(updateR)
library(installr)
updateR()
updateR()
updateR()
library(shiny); runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
as.numeric("12.3%")
extract_numeric("12.3%")
parse_number("12.3%")
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
breaks = seq(0,1,6)
breaks = seq(0,1,0.2)
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
seq(0,1,1/6)
seq(0,1,1/5)
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer.R')
library(shiny); runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Shiny plots/FRA_Visualizer/FRA_Visualizer.R')
library(shiny); runApp('FRA_Visualizer.R')
runApp('FRA_Visualizer.R')
round(123456 / 1000) * 1000)
round(123456 / 1000) * 1000
round(123456 / 1000)
round(123456 / 1000) * 1001
round(123456 / 1000) * 1000
round(123456 / 1000) * 1000 + 1000
ceiling(123456 / 1000) * 1000
runApp('FRA_Visualizer.R')
runApp('C:/Users/liuxi/Desktop/Research/2023.03.22 (FRA 2023)/Main APP')
